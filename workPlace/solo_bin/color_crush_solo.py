from workPlace.base_vars import Locations

import numpy as np
from PIL import Image


class ColorCrushSolo(Locations):
    def __init__(self, power_up):
        super().__init__()
        self.power_up = power_up
        self._power_up_charge = None
        self.turns_left = 6
        self.state_image = Image.open(self.screenshot_state_path)

    @property
    def powerUpChargeSetter(self):
        return self._power_up_charge

    @powerUpChargeSetter.setter
    def powerUpChargeSetter(self, value):
        if self.power_up == 'Jelly':
            value = 7
        self._power_up_charge = value


    def tile_scanner(self):
        # Regions of boxes with tiles
        # line - row x 7
        tile_regions = [
            # line 1
            (671, 430, 743, 502),       # 1 1
            (750, 430, 822, 502),       # 1 2
            (829, 430, 901, 502),       # 1 3
            (907, 430, 979, 502),       # 1 4
            (986, 430, 1058, 502),      # 1 5
            (1064, 430, 1136, 502),     # 1 6
            (1143, 430, 1215, 502),     # 1 7
            # line 2
            (671, 509, 743, 583),       # 2 1
            (750, 509, 822, 583),       # 2 2
            (829, 509, 901, 583),       # 2 3
            (907, 509, 979, 583),       # 2 4
            (986, 509, 1058, 583),      # 2 5
            (1064, 509, 1136, 583),     # 2 6
            (1143, 509, 1215, 583),     # 2 7
            # line 3
            (671, 588, 743, 660),       # 3 1
            (750, 588, 822, 660),       # 3 2
            (829, 588, 901, 660),     # 3 3
            (907, 588, 979, 660),     # 3 4
            (986, 588, 1058, 660),     # 3 5
            (1064, 588, 1136, 660),     # 3 6
            (1143, 588, 1215, 660),     # 3 7
            # line 4
            (671, 666, 743, 738),  # 4 1
            (750, 666, 822, 738),  # 4 2
            (829, 666, 901, 738),  # 4 3
            (907, 666, 979, 738),  # 4 4
            (986, 666, 1058, 738),  # 4 5
            (1064, 666, 1136, 738),  # 4 6
            (1143, 666, 1215, 738),  # 4 7
            # line 5
            (671, 745, 743, 817),  # 5 1
            (750, 745, 822, 817),  # 5 2
            (829, 745, 901, 817),  # 5 3
            (907, 745, 979, 817),  # 5 4
            (986, 745, 1058, 817),  # 5 5
            (1064, 745, 1136, 817),  # 5 6
            (1143, 745, 1215, 817),  # 5 7
            # line 6
            (671, 823, 743, 895),  # 6 1
            (750, 823, 822, 895),  # 6 2
            (829, 823, 901, 895),  # 6 3
            (907, 823, 979, 895),  # 6 4
            (986, 823, 1058, 895),  # 6 5
            (1064, 823, 1136, 895),  # 6 6
            (1143, 823, 1215, 895),  # 6 7
            # line 7
            (671, 902, 743, 974),  # 7 1
            (750, 902, 822, 974),  # 7 2
            (829, 902, 901, 974),  # 7 3
            (907, 902, 979, 974),  # 7 4
            (986, 902, 1058, 974),  # 7 5
            (1064, 902, 1136, 974),  # 7 6
            (1143, 902, 1215, 974)  # 7 7
        ]





